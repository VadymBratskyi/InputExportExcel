using AutoGenerateData.Generator.Base;
using EFCore.BulkExtensions;
using AutoGenerateData.Models.Db;
using AutoGenerateData.Models.Interface;
using Bogus;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System;

namespace AutoGenerateData.Generator
{
	public class GenerateItems
	{
		private Faker _faker;
		private GenerateDbContext _db;
		private List<IEntity> _listEntity;
		private int _count;
		private List<Task> tasks;

		private const int MaxInChunk = 100;
		
		public event Action<int> Notify;

		public GenerateItems(int countItems, GenerateDbContext db) {
			_faker = new Faker("ru");
			_count = countItems;
			_db = db;		
			_listEntity = new List<IEntity>();
		}

		public GenerateItems(int countItems)
		{
			_faker = new Faker("ru");
			_count = countItems;
			_listEntity = new List<IEntity>();
		}

		public List<IEntity> GetEntiesList()
		{
			return _listEntity;
		}

		public void RunGenerator(Creator creteEntity, bool saveToDb = true) {

			Creator creator = creteEntity;

			for (var i = 0; i < _count; i++)
			{
				if (_listEntity.Count == MaxInChunk && saveToDb) {
					SaveToDb();
				}
				
				var entity = creator.FactoryMethod(_faker);
				_listEntity.Add(entity);
				
			}

			if (_listEntity.Any() && saveToDb)
			{
				SaveToDb();
			}

			_db.SaveChanges();
		}

		private void SaveToDb()
		{

			if (_listEntity.Any())
			{
				_db.BulkInsert(_listEntity);
				Notify?.Invoke(_listEntity.Count);
				_listEntity.Clear();
			}

		}

		public void RunGeneratorAsync(Creator creteEntity, bool saveToDb = true)
		{
			Creator creator = creteEntity;

			var countThread = _count / 10;

			Task[] listTasks = new Task[10] {
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
				Task.Run(() => RunGenerator(countThread, creator)),
			};			

			Task.WaitAll(listTasks);
		}		

		private async void RunGenerator(int count, Creator creator) {

			using (var db = new GenerateDbContext()) {

				var list = new List<IEntity>();

				for (var i = 0; i < count; i++)
				{
					if (list.Count == MaxInChunk)
					{
						await SaveToDbAsync(db, list);
					}

					var entity = creator.FactoryMethod(_faker);
					list.Add(entity);
				}

				if (list.Any())
				{
					await SaveToDbAsync(db, list);
				}				
						
			}
				
		}	

		private async Task SaveToDbAsync(GenerateDbContext context, List<IEntity> list)
		{
			if (list.Any())
			{
				await context.BulkInsertAsync(list);
				await context.SaveChangesAsync();
				Notify?.Invoke(list.Count);
				list.Clear();
			}

		}

	}
}
